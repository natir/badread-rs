var searchIndex = JSON.parse('{\
"rustyread":{"doc":"","t":[0,0,0,0,5,5,5,0,0,5,5,3,13,4,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,5,0,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,12,12,12,12,12,12,3,3,3,3,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,12,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,11,11,11,11,12,12,12,12,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,2,13,4,2,13,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,12,12,13,13,13,13,4,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,13,13,13,4,13,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,2,2,2,2,2,2,0,0,0,0,0,0,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,11,11,11,11,11,12,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,0,0,0,0,5,3,13,3,13,4,13,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,12,11,11,11,12,11,12,12,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,6,6,6,5,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,5,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5],"n":["alignment","cli","error","model","random_base","random_base_diff","random_seq","references","simulate","align","edit_distance","Command","Simulate","SubCommand","augment_args","augment_args_for_update","augment_subcommands","augment_subcommands_for_update","borrow","borrow","borrow_mut","borrow_mut","deref","deref","deref_mut","deref_mut","drop","drop","fmt","fmt","from","from","from_arg_matches","from_arg_matches","from_arg_matches_mut","from_arg_matches_mut","from_subset","from_subset","has_subcommand","i82level","init","init","into","into","into_app","into_app","into_app_for_update","into_app_for_update","is_in_subset","is_in_subset","set_nb_threads","simulate","subcmd","threads","to_subset","to_subset","to_subset_unchecked","to_subset_unchecked","try_from","try_from","try_into","try_into","type_id","type_id","update_from_arg_matches","update_from_arg_matches","update_from_arg_matches_mut","update_from_arg_matches_mut","verbosity","vzip","vzip","0","0","0","1","1","2","Command","Duo","Quantity","Trio","augment_args","augment_args_for_update","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","chimera","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","drop","drop","drop","drop","end_adapter","end_adapter_seq","eq","eq","eq","equivalent","equivalent","equivalent","error_model","fmt","fmt","fmt","fmt","found_model","from","from","from","from","from_arg_matches","from_arg_matches_mut","from_str","from_str","from_str","from_subset","from_subset","from_subset","from_subset","glitches","identity","init","init","init","init","into","into","into","into","into_app","into_app_for_update","is_in_subset","is_in_subset","is_in_subset","is_in_subset","junk","length","nb_base_store","ne","ne","ne","number_of_base","output_path","qscore_model","quantity","random","reference_path","seed","small_plasmid_bias","start_adapter","start_adapter_seq","to_subset","to_subset","to_subset","to_subset","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","update_from_arg_matches","update_from_arg_matches_mut","vzip","vzip","vzip","vzip","Cli","Cli","Error","Model","Model","borrow","borrow_mut","cli","deref","deref_mut","drop","fmt","fmt","from","from","from","from_subset","init","into","is_in_subset","model","source","to_string","to_subset","to_subset_unchecked","try_from","try_into","type_id","vzip","0","0","CantFoundModelPath","CantParseDuo","CantParseQuantity","CantParseTrio","Cli","SmallPlasmidBias","borrow","borrow_mut","deref","deref_mut","drop","fmt","fmt","from","from_subset","init","into","is_in_subset","to_string","to_subset","to_subset_unchecked","try_from","try_into","type_id","vzip","ErrorParsing","IdentityParamMustBeUpperThan0","LengthParamMustBeUpperThan0","Model","QualityCigarLenNotOdd","QualityNotMinimalCigarString","QualityParsing","borrow","borrow_mut","deref","deref_mut","drop","fmt","fmt","from","from_subset","init","into","is_in_subset","to_string","to_subset","to_subset_unchecked","try_from","try_into","type_id","vzip","Adapter","Error","Glitch","Identity","Length","Quality","adapter","error","glitch","identity","length","quality","Adapter","borrow","borrow_mut","deref","deref_mut","drop","from","from_subset","get_end","get_start","init","into","is_in_subset","max_len","new","to_subset","to_subset_unchecked","try_from","try_into","type_id","vzip","Error","add_errors_to_kmer","borrow","borrow_mut","deref","deref_mut","drop","from","from_stream","from_subset","init","into","is_in_subset","k","random","random_error","to_subset","to_subset_unchecked","try_from","try_into","type_id","vzip","Glitch","borrow","borrow_mut","deref","deref_mut","drop","from","from_subset","get_glitch","init","into","is_in_subset","new","to_subset","to_subset_unchecked","try_from","try_into","type_id","vzip","Identity","borrow","borrow_mut","deref","deref_mut","drop","fmt","from","from_subset","get_identity","init","into","is_in_subset","new","to_subset","to_subset_unchecked","try_from","try_into","type_id","vzip","Length","borrow","borrow_mut","deref","deref_mut","drop","from","from_subset","get_length","init","into","is_in_subset","new","to_subset","to_subset_unchecked","try_from","try_into","type_id","vzip","Quality","borrow","borrow_mut","deref","deref_mut","drop","from","from_stream","from_subset","get_qscore","ideal","init","into","is_in_subset","max_k","random","to_subset","to_subset_unchecked","try_from","try_into","type_id","vzip","Reference","References","borrow","borrow","borrow_mut","borrow_mut","choose_reference","circular","deref","deref","deref_mut","deref_mut","dist","drop","drop","eq","fmt","from","from","from_stream","from_stream_adjusted_weight","from_subset","from_subset","id","init","init","into","into","is_in_subset","is_in_subset","ne","new","revcomp","seq","sequences","to_subset","to_subset","to_subset_unchecked","to_subset_unchecked","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","description","error","fragments","quality","simulate","Description","Junk","Origin","Random","ReadType","Real","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","chimera","clone","clone","clone","clone_into","clone_into","clone_into","deref","deref","deref","deref_mut","deref_mut","deref_mut","drop","drop","drop","end","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","from","from","from","from_subset","from_subset","from_subset","identity","init","init","init","into","into","into","is_in_subset","is_in_subset","is_in_subset","junk","length","ne","ne","new","origin","random","read_type","ref_id","reference","start","strand","to_owned","to_owned","to_owned","to_string","to_string","to_subset","to_subset","to_subset","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vzip","vzip","vzip","Change","Changes","Cigar","Seq","add_error","add_glitches","begin","borrow","borrow_mut","cigar","clone","clone_into","contain","deref","deref_mut","drop","edit","end_err","end_raw","eq","fmt","from","from_seq","from_subset","init","into","is_in_subset","merge","ne","new","number_of_edit","overlap","seq","sequence","to_owned","to_subset","to_subset_unchecked","try_from","try_into","type_id","update_align","vzip","Fragments","borrow","borrow_mut","deref","deref_mut","drop","from","from_subset","generate_fragment","get_read_type","init","into","into_iter","is_chimera","is_in_subset","new","next","to_subset","to_subset_unchecked","try_from","try_into","type_id","vzip","generate_quality"],"q":["rustyread","","","","","","","","","rustyread::alignment","","rustyread::cli","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","rustyread::cli::SubCommand","rustyread::cli::simulate","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","rustyread::error","","","","","","","","","","","","","","","","","","","","","","","","","","","","","rustyread::error::Error","","rustyread::error::cli","","","","","","","","","","","","","","","","","","","","","","","","","rustyread::error::model","","","","","","","","","","","","","","","","","","","","","","","","","","rustyread::model","","","","","","","","","","","","rustyread::model::adapter","","","","","","","","","","","","","","","","","","","","","rustyread::model::error","","","","","","","","","","","","","","","","","","","","","","rustyread::model::glitch","","","","","","","","","","","","","","","","","","","rustyread::model::identity","","","","","","","","","","","","","","","","","","","","rustyread::model::length","","","","","","","","","","","","","","","","","","","rustyread::model::quality","","","","","","","","","","","","","","","","","","","","","","rustyread::references","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","rustyread::simulate","","","","","rustyread::simulate::description","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","rustyread::simulate::error","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","rustyread::simulate::fragments","","","","","","","","","","","","","","","","","","","","","","","rustyread::simulate::quality"],"d":["Function to align sequence","All stuff relate to command line","All stuff relate to error","Manage model","Get a random base","Get a random base diffrent than nuc","Get random sequences","A collections of sequence to store reference sequence","Simulate reads","","","A long read simulator based on badread idea and model","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","Convert verbosity level (number of v) is log::Level","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","set number of global rayon thread pool","All stuff relate to simulate subcommand","Subcommand call","Number of thread use by rustyread, 0 use all avaible core, …","","","","","","","","","","","","","","","Verbosity level also control by environment variable …","","","","","","","","","Struct use to parse simulate subcommand argument","Store a pair of value, can be parse from str if it’s …","Store quantity as coverage of number of base","Store a trio of value, can be parse from str if it’s …","","","","","","","","","","","Percentage at which separate fragments join together","","","","","","","","","","","","","Adapter parameters for read ends (rate and amount)","Adapter parameters for read ends","","","","","","","Path to an error model file","","","","","Found path to model file","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","Read glitch parameters (rate, size and skip)","Sequencing identity distribution (mean, max and stdev)","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","This percentage of reads wil be low complexity junk","Fragment length distribution (mean and stdev)","Number of base, rustyread can store in ram before write in …","","","","Convert Quantity in a number of base, if base is set …","Path where read is write","Path to an quality score model file","Either an absolute value (e.g. 250M) or a relative depth …","This percentage of reads wil be random sequence","Path to reference fasta (can be gzipped, bzip2ped, xzped)","Random number generator seed for deterministic output …","If set, then small circular plasmids are lost when the …","Adapter parameters for read starts (rate and amount)","Adapter parameters for read starts","","","","","","","","","","","","","","","","","","","","","","","","","","","","Error related to command line interface","Enum to manage error polymorphism","","Error related to model","","","Command line interface error","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","Model error","","","","","","","","","","","Cant found model path","Cant parse a duo of value","quantity didn’t match to pattern \\\\d+[KMGx]?","Cant parse a trio of value","Enum to manage error polymorphism","Small plasmid bias","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","","","","Error durring error model parsing","Identity model parameter must be upper than 0.0","Length model parameter must be upper than 0.0","Enum to manage error polymorphism","Cigar string length must be odd","Quality model not contains minimal cigar string","Error durring quality model parsing","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","Model to get sequence adapter","Model to add error sequence","Model to add glitches sequence","Model to get read identity","Model to get length of reads","Model to generate qscore","Struct to get sequence adapter","","","","","","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","","","Create model from parameter","","","","","","","Struct to load and apply error model","Add error to a kmer","","","","","","Returns the argument unchanged.","Load model from an stdin","","","Calls <code>U::from(self)</code>.","","Kmer length of model","Setup a random error model","Add a single random error in a kmer","","","","","","","Struct to generate glitches in fragment","","","","","","Returns the argument unchanged.","","Get glitch","","Calls <code>U::from(self)</code>.","","Create model from parameter","","","","","","","Struct to generate length of fragment","","","","","","","Returns the argument unchanged.","","Get identity from model","","Calls <code>U::from(self)</code>.","","Create model from parameter","","","","","","","Struct to generate length of fragment","","","","","","Returns the argument unchanged.","","Get length from model","","Calls <code>U::from(self)</code>.","","Create model from parameter","","","","","","","Struct to load and apply quality model","","","","","","Returns the argument unchanged.","Load model from an stdin","","Generate error associate to a cigar string with odd length","Build an ideal quality score model","","Calls <code>U::from(self)</code>.","","Kmer length of model","Build a random quality score model","","","","","","","Store a reference sequence","A collections of sequence","","","","","Randomly get a reference index and strand according to …","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Read a collection of sequence in fasta format from an …","Same as from_stream but small sequence have increase …","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","Build a new refrence","","","","","","","","","","","","","","","","Manage read description","Add error on reads","Generate fragments","Generate quality for simulate","main simulate function","Store information about read","","Store information about origin of read","","An enum to represent type of read","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","A struct to represent a change in a sequence","","","","Add Change correspond to error in changes","Create Change correspond to glitches","Get begin of Change","","","Get cigar string","","","Return true if other is contain in self This function …","","","","Get edit distance","Get end of change in erroneous sequence","Get end of change in raw sequence","","","Returns the argument unchanged.","Build a new Change from a begin, end, a change sequence …","","","Calls <code>U::from(self)</code>.","","Try to merge two Change. This function assume other.begin …","","Build a new Change warning CIGAR String and edit_distance …","From identity an seq length compute number of edit","Return True if self and Change overlap This function …","Get erroneous sequence","Apply error on read","","","","","","","Update alignment info of error","","An iterator produce fragment, a description and a seed","","","","","","Returns the argument unchanged.","","Produce a fragment","Get the read type","","Calls <code>U::from(self)</code>.","","Return true fragment must be a chimera","","Create a new Fragments","","","","","","","","Generate quality string"],"i":[0,0,0,0,0,0,0,0,0,0,0,0,9,0,6,6,9,9,6,9,6,9,6,9,6,9,6,9,6,9,6,9,6,9,6,9,6,9,9,0,6,9,6,9,6,9,6,9,6,9,0,0,6,6,6,9,6,9,6,9,6,9,6,9,6,9,6,9,6,6,9,49,20,21,20,21,21,0,0,0,0,22,22,19,20,21,22,19,20,21,22,22,19,20,21,22,19,20,21,22,19,20,21,22,22,22,19,20,21,19,20,21,22,19,20,21,22,0,19,20,21,22,22,22,19,20,21,19,20,21,22,22,22,19,20,21,22,19,20,21,22,22,22,19,20,21,22,22,22,22,19,20,21,19,22,22,22,22,22,22,22,22,22,19,20,21,22,19,20,21,22,19,20,21,22,19,20,21,22,19,20,21,22,22,22,19,20,21,22,0,26,0,0,26,26,26,0,26,26,26,26,26,26,26,26,26,26,26,26,0,26,26,26,26,26,26,26,26,50,51,28,28,28,28,0,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,27,27,27,0,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,0,0,0,0,0,0,0,0,0,0,0,0,0,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,0,32,32,32,32,32,32,32,32,32,32,32,32,32,32,0,32,32,32,32,32,32,0,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,0,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,0,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,0,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,0,0,37,38,37,38,37,38,37,38,37,38,37,37,38,38,38,37,38,37,37,37,38,38,37,38,37,38,37,38,38,38,38,38,37,37,38,37,38,37,38,37,38,37,38,37,38,0,0,0,0,0,0,40,0,40,0,40,40,41,42,40,41,42,42,40,41,42,40,41,42,40,41,42,40,41,42,40,41,42,41,40,41,42,40,41,41,42,42,40,41,42,40,41,42,42,40,41,42,40,41,42,40,41,42,41,42,41,42,42,42,41,41,41,41,41,41,40,41,42,41,42,40,41,42,40,41,42,40,41,42,40,41,42,40,41,42,40,41,42,0,0,0,0,0,0,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,0,45,45,0,45,45,45,45,45,45,45,45,0,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,0],"f":[0,0,0,0,[[],1],[1,1],[2,[[3,[1]]]],0,0,[[]],[[],4],0,0,0,[5,5],[5,5],[5,5],[5,5],[[]],[[]],[[]],[[]],[2],[2],[2],[2],[2],[2],[[6,7],8],[[9,7],8],[[]],[[]],[10,[[12,[6,11]]]],[10,[[12,[9,11]]]],[10,[[12,[6,11]]]],[10,[[12,[9,11]]]],[[]],[[]],[13,14],[15,[[17,[16]]]],[[],2],[[],2],[[]],[[]],[[],5],[[],5],[[],5],[[],5],[[],14],[[],14],[2],0,0,0,[[],17],[[],17],[[]],[[]],[[],12],[[],12],[[],12],[[],12],[[],18],[[],18],[[6,10],[[12,[11]]]],[[9,10],[[12,[11]]]],[[6,10],[[12,[11]]]],[[9,10],[[12,[11]]]],0,[[]],[[]],0,0,0,0,0,0,0,0,0,0,[5,5],[5,5],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[2],[2],[2],[2],[2],[2],[2],[2],[2],[2],[2],[2],0,0,[[19,19],14],[[20,20],14],[[21,21],14],[[],14],[[],14],[[],14],0,[[19,7],8],[[20,7],8],[[21,7],8],[[22,7],8],[[23,23],[[25,[24]]]],[[]],[[]],[[]],[[]],[10,[[12,[22,11]]]],[10,[[12,[22,11]]]],[13,[[12,[19]]]],[13,[[12,[20]]]],[13,[[12,[21]]]],[[]],[[]],[[]],[[]],0,0,[[],2],[[],2],[[],2],[[],2],[[]],[[]],[[]],[[]],[[],5],[[],5],[[],14],[[],14],[[],14],[[],14],0,0,0,[[19,19],14],[[20,20],14],[[21,21],14],[[19,4],4],0,0,0,0,0,0,0,0,0,[[],17],[[],17],[[],17],[[],17],[[]],[[]],[[]],[[]],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],18],[[],18],[[],18],[[],18],[[22,10],[[12,[11]]]],[[22,10],[[12,[11]]]],[[]],[[]],[[]],[[]],0,0,0,0,0,[[]],[[]],0,[2],[2],[2],[[26,7],8],[[26,7],8],[27,26],[28,26],[[]],[[]],[[],2],[[]],[[],14],0,[26,[[17,[29]]]],[[],23],[[],17],[[]],[[],12],[[],12],[[],18],[[]],0,0,0,0,0,0,0,0,[[]],[[]],[2],[2],[2],[[28,7],8],[[28,7],8],[[]],[[]],[[],2],[[]],[[],14],[[],23],[[],17],[[]],[[],12],[[],12],[[],18],[[]],0,0,0,0,0,0,0,[[]],[[]],[2],[2],[2],[[27,7],8],[[27,7],8],[[]],[[]],[[],2],[[]],[[],14],[[],23],[[],17],[[]],[[],12],[[],12],[[],18],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[2],[2],[2],[[]],[[]],[30,[[3,[1]]]],[30,[[3,[1]]]],[[],2],[[]],[[],14],[30,2],[[[3,[1]],[3,[1]],31,31,31,31],[[25,[30]]]],[[],17],[[]],[[],12],[[],12],[[],18],[[]],0,[32],[[]],[[]],[2],[2],[2],[[]],[[],[[25,[32]]]],[[]],[[],2],[[]],[[],14],[32,2],[2,32],[[],[[3,[1]]]],[[],17],[[]],[[],12],[[],12],[[],18],[[]],0,[[]],[[]],[2],[2],[2],[[]],[[]],[33,17],[[],2],[[]],[[],14],[[31,31,31],[[25,[33]]]],[[],17],[[]],[[],12],[[],12],[[],18],[[]],0,[[]],[[]],[2],[2],[2],[[34,7],8],[[]],[[]],[34,31],[[],2],[[]],[[],14],[[31,31,31],[[25,[34]]]],[[],17],[[]],[[],12],[[],12],[[],18],[[]],0,[[]],[[]],[2],[2],[2],[[]],[[]],[35,4],[[],2],[[]],[[],14],[[31,31],[[25,[35]]]],[[],17],[[]],[[],12],[[],12],[[],18],[[]],0,[[]],[[]],[2],[2],[2],[[]],[[],[[25,[36]]]],[[]],[36,[[25,[1]]]],[[],36],[[],2],[[]],[[],14],[36,2],[[],36],[[],17],[[]],[[],12],[[],12],[[],18],[[]],0,0,[[]],[[]],[[]],[[]],[37],0,[2],[2],[2],[2],0,[2],[2],[[38,38],14],[[38,7],8],[[]],[[]],[[],[[25,[37]]]],[[14,35],[[25,[37]]]],[[]],[[]],0,[[],2],[[],2],[[]],[[]],[[],14],[[],14],[[38,38],14],[[23,39,14],38],0,0,0,[[],17],[[],17],[[]],[[]],[[],12],[[],12],[[],12],[[],12],[[],18],[[],18],[[]],[[]],0,0,0,0,[22,25],0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],0,[40,40],[41,41],[42,42],[[]],[[]],[[]],[2],[2],[2],[2],[2],[2],[2],[2],[2],0,[[40,40],14],[[41,41],14],[[42,42],14],[[40,7],8],[[41,7],8],[[41,7],8],[[42,7],8],[[42,7],8],[[]],[[]],[[]],[[]],[[]],[[]],0,[[],2],[[],2],[[],2],[[]],[[]],[[]],[[],14],[[],14],[[],14],[2,41],0,[[41,41],14],[[42,42],14],[[41,[17,[41]],2,31],42],0,[2,41],0,0,[[23,43,2,2],41],0,0,[[]],[[]],[[]],[[],23],[[],23],[[],17],[[],17],[[],17],[[]],[[]],[[]],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],18],[[],18],[[],18],[[]],[[]],[[]],0,0,0,0,[[2,31,44,32]],[[44,33]],[45,2],[[]],[[]],[45,46],[45,45],[[]],[[45,45],14],[2],[2],[2],[45,31],[45,2],[45,2],[[45,45],14],[[45,7],8],[[]],[[2,2,47],45],[[]],[[],2],[[]],[[],14],[[45,45],31],[[45,45],14],[[2,2,47],45],[[31,2],31],[[45,45],14],[45,47],[[31,32,33]],[[]],[[],17],[[]],[[],12],[[],12],[[],18],[45],[[]],0,[[]],[[]],[2],[2],[2],[[]],[[]],[48],[48,40],[[],2],[[]],[[]],[48,14],[[],14],[[4,37,35,34],48],[48,17],[[],17],[[]],[[],12],[[],12],[[],18],[[]],[36,[[25,[[3,[1]]]]]]],"p":[[15,"u8"],[15,"usize"],[3,"Vec"],[15,"u64"],[6,"Command"],[3,"Command"],[3,"Formatter"],[6,"Result"],[4,"SubCommand"],[3,"ArgMatches"],[3,"Error"],[4,"Result"],[15,"str"],[15,"bool"],[15,"i8"],[4,"Level"],[4,"Option"],[3,"TypeId"],[3,"Quantity"],[3,"Duo"],[3,"Trio"],[3,"Command"],[3,"String"],[3,"PathBuf"],[6,"Result"],[4,"Error"],[4,"Model"],[4,"Cli"],[8,"Error"],[3,"Adapter"],[15,"f64"],[3,"Error"],[3,"Glitch"],[3,"Identity"],[3,"Length"],[3,"Quality"],[3,"References"],[3,"Reference"],[3,"Box"],[4,"ReadType"],[3,"Origin"],[3,"Description"],[15,"char"],[6,"Changes"],[3,"Change"],[6,"Cigar"],[6,"Seq"],[3,"Fragments"],[13,"Simulate"],[13,"Cli"],[13,"Model"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
